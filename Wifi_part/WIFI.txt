#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
 
#define ssid      "PORSCHE DESIGN HUAWEI Mate 30"       //这里改成你的设备当前环境下WIFI名字
#define password  "12345678"     //这里改成你的设备当前环境下WIFI密码
 
WiFiUDP Udp;//实例化WiFiUDP对象
unsigned int localUdpPort = 1234;  // 自定义本地监听端口
unsigned int remoteUdpPort = 4321;  // 自定义远程监听端口
char incomingPacket[255];  // 保存Udp工具发过来的消息
 
void setup()
{
  pinMode(LED_BUILTIN,OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH); // 熄灭LED 
  Serial.begin(115200);//打开串口
  Serial.println();
 
  Serial.printf("正在连接 %s ", ssid);
  WiFi.begin(ssid, password);//连接到wifi
  while (WiFi.status() != WL_CONNECTED)//等待连接
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println("连接成功");
 
  if(Udp.begin(localUdpPort)){//启动Udp监听服务
    Serial.println("监听成功");
    //打印本地的ip地址，在UDP工具中会使用到
    //WiFi.localIP().toString().c_str()用于将获取的本地IP地址转化为字符串    
    Serial.printf("现在收听IP：%s, UDP端口：%d\n", WiFi.localIP().toString().c_str(), localUdpPort);
  }else{
    Serial.println("监听失败");
  }
}
 
void loop()
{
  //解析Udp数据包
  int packetSize = Udp.parsePacket();//获得解析包
  if (packetSize)//解析包不为空
  {
    //收到Udp数据包
    //Udp.remoteIP().toString().c_str()用于将获取的远端IP地址转化为字符串
    Serial.printf("收到来自远程IP：%s（远程端口：%d）的数据包字节数：%d\n", Udp.remoteIP().toString().c_str(), Udp.remotePort(), packetSize);
      
    // 读取Udp数据包并存放在incomingPacket
    int len = Udp.read(incomingPacket, 255);//返回数据包字节数
    if (len > 0)
    { 
      incomingPacket[len] = 0;//清空缓存
      Serial.printf("UDP数据包内容为: %s\n", incomingPacket);//向串口打印信息
 
      //strcmp函数是string compare(字符串比较)的缩写，用于比较两个字符串并根据比较结果返回整数。
      //基本形式为strcmp(str1,str2)，若str1=str2，则返回零；若str1<str2，则返回负数；若str1>str2，则返回正数。
      if (strcmp(incomingPacket, "LED_OFF") == 0) // 命令LED_OFF  
      {  
        digitalWrite(LED_BUILTIN, HIGH); // 熄灭LED  
        sendCallBack("LED has been turn off\n");  
      }  
      else if (strcmp(incomingPacket, "LED_ON") == 0) //如果收到LED_ON  
      {  
        digitalWrite(LED_BUILTIN, LOW); // 点亮LED  
        sendCallBack("LED has been turn on\n");  
      }  
      else // 如果指令错误，调用sendCallBack
      {  
        sendCallBack("Command Error!");  
      }  
    }
  }
}
 
//向udp工具发送消息
void sendCallBack(const char *buffer)
{  
  Udp.beginPacket(Udp.remoteIP(), remoteUdpPort);//配置远端ip地址和端口
  Udp.write(buffer); //把数据写入发送缓冲区
  Udp.endPacket(); //发送数据 
}